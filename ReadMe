Building the image

docker build -t personnel .


running the image

docker run -d -p 8080:80 --name MyWebsite personnel


open this link

https://madanreddy123.github.io/NewWebsiteShowingTheProfessionalDetails/


import com.konghq.unirest.http.HttpResponse;
import com.konghq.unirest.http.Unirest;
import org.json.JSONArray;
import org.json.JSONObject;

import java.util.HashMap;
import java.util.Map;

public class JiraZephyrUtility {
    private final String jiraBaseUrl;
    private final String zephyrBaseUrl;
    private final String authHeader;

    public JiraZephyrUtility(String jiraBaseUrl, String zephyrBaseUrl, String jiraUsername, String jiraApiToken) {
        this.jiraBaseUrl = jiraBaseUrl;
        this.zephyrBaseUrl = zephyrBaseUrl;
        this.authHeader = "Basic " + java.util.Base64.getEncoder().encodeToString((jiraUsername + ":" + jiraApiToken).getBytes());
    }

    public String createExecution(String projectId, String cycleId, String issueId, String versionId) throws Exception {
        String url = zephyrBaseUrl + "/rest/zapi/latest/execution";
        JSONObject payload = new JSONObject();
        payload.put("issueId", issueId);
        payload.put("versionId", versionId);
        payload.put("cycleId", cycleId);
        payload.put("projectId", projectId);

        HttpResponse<String> response = Unirest.post(url)
                .header("Content-Type", "application/json")
                .header("Authorization", authHeader)
                .body(payload)
                .asString();

        if (response.getStatus() != 200) {
            throw new Exception("Error creating execution: " + response.getBody());
        }

        return new JSONObject(response.getBody()).getJSONObject("execution").getString("id");
    }

    public void updateExecutionStatus(String executionId, int status) throws Exception {
        String url = zephyrBaseUrl + "/rest/zapi/latest/execution/" + executionId + "/execute";
        JSONObject payload = new JSONObject();
        payload.put("status", status);

        HttpResponse<String> response = Unirest.put(url)
                .header("Content-Type", "application/json")
                .header("Authorization", authHeader)
                .body(payload)
                .asString();

        if (response.getStatus() != 200) {
            throw new Exception("Error updating execution status: " + response.getBody());
        }
    }

    public String getIssueId(String issueKey) throws Exception {
        String url = jiraBaseUrl + "/rest/api/2/issue/" + issueKey;

        HttpResponse<String> response = Unirest.get(url)
                .header("Authorization", authHeader)
                .asString();

        if (response.getStatus() != 200) {
            throw new Exception("Error retrieving issue ID: " + response.getBody());
        }

        return new JSONObject(response.getBody()).getString("id");
    }

    public String getCycleId(String cycleName, String projectId, String versionId) throws Exception {
        String url = zephyrBaseUrl + "/rest/zapi/latest/cycle?projectId=" + projectId + "&versionId=" + versionId;

        HttpResponse<String> response = Unirest.get(url)
                .header("Authorization", authHeader)
                .asString();

        if (response.getStatus() != 200) {
            throw new Exception("Error retrieving cycle ID: " + response.getBody());
        }

        JSONObject cycles = new JSONObject(response.getBody());
        for (String key : cycles.keySet()) {
            if (cycles.getJSONObject(key).getString("name").equals(cycleName)) {
                return key;
            }
        }

        throw new Exception("Cycle not found: " + cycleName);
    }

    public String getProjectId(String projectKey) throws Exception {
        String url = jiraBaseUrl + "/rest/api/2/project/" + projectKey;

        HttpResponse<String> response = Unirest.get(url)
                .header("Authorization", authHeader)
                .asString();

        if (response.getStatus() != 200) {
            throw new Exception("Error retrieving project ID: " + response.getBody());
        }

        return new JSONObject(response.getBody()).getString("id");
    }

    public String getVersionId(String projectId, String versionName) throws Exception {
        String url = jiraBaseUrl + "/rest/api/2/project/" + projectId + "/versions";

        HttpResponse<String> response = Unirest.get(url)
                .header("Authorization", authHeader)
                .asString();

        if (response.getStatus() != 200) {
            throw new Exception("Error retrieving version ID: " + response.getBody());
        }

        JSONArray versions = new JSONArray(response.getBody());
        for (int i = 0; i < versions.length(); i++) {
            if (versions.getJSONObject(i).getString("name").equals(versionName)) {
                return versions.getJSONObject(i).getString("id");
            }
        }

        throw new Exception("Version not found: " + versionName);
    }

    public Map<String, String> getTestCaseIdsAndKeys(String[] cucumberTags) throws Exception {
        Map<String, String> testCaseIdsAndKeys = new HashMap<>();

        for (String tag : cucumberTags) {
            String issueKey = tag.replace("@", ""); // Assuming tags are in the format @TEST-123
            String issueId = getIssueId(issueKey);
            testCaseIdsAndKeys.put(issueKey, issueId);
        }

        return testCaseIdsAndKeys;
    }
}