Building the image

docker build -t personnel .


running the image

docker run -d -p 8080:80 --name MyWebsite personnel


open this link

https://madanreddy123.github.io/NewWebsiteShowingTheProfessionalDetails/

    for (String macAlgorithm : Security.getAlgorithms("Mac")) {
            System.out.println(macAlgorithm);
        }

/rest/api/latest/issue/testcaseid?

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Instant;
import java.util.Base64;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import java.security.MessageDigest;
import java.nio.charset.StandardCharsets;

public class ZephyrIntegration {

    private static final String ACCESS_KEY = "your_access_key";
    private static final String SECRET_KEY = "your_secret_key";
    private static final String ACCOUNT_ID = "your_account_id";
    private static final String JIRA_BASE_URL = "https://your-domain.atlassian.net";
    private static final String CYCLE_ID = "your_test_cycle_id";
    private static final String PROJECT_ID = "your_project_id";
    private static final String VERSION_ID = "your_version_id";

    public static void main(String[] args) throws Exception {
        JsonArray testResults = new JsonArray();
        JsonObject test1 = new JsonObject();
        test1.addProperty("testCaseKey", "TEST-1");
        test1.addProperty("status", "Pass");
        testResults.add(test1);

        JsonObject test2 = new JsonObject();
        test2.addProperty("testCaseKey", "TEST-2");
        test2.addProperty("status", "Fail");
        testResults.add(test2);

        for (int i = 0; i < testResults.size(); i++) {
            JsonObject result = testResults.get(i).getAsJsonObject();
            postTestResult(result);
        }
    }

    private static void postTestResult(JsonObject result) throws Exception {
        String apiPath = "/public/rest/api/1.0/execution";
        URI uri = new URI(JIRA_BASE_URL + apiPath);

        String jwtToken = createJwt("POST", apiPath);

        JsonObject payload = new JsonObject();
        payload.addProperty("status", result.get("status").getAsString());
        payload.addProperty("cycleId", CYCLE_ID);
        payload.addProperty("projectId", PROJECT_ID);
        payload.addProperty("versionId", VERSION_ID);
        payload.add("issueId", new JsonPrimitive(result.get("testCaseKey").getAsString()));

        HttpRequest request = HttpRequest.newBuilder()
                .uri(uri)
                .header("Authorization", "JWT " + jwtToken)
                .header("zapiAccessKey", ACCESS_KEY)
                .header("Content-Type", "application/json")
                .POST(HttpRequest.BodyPublishers.ofString(payload.toString()))
                .build();

        HttpClient client = HttpClient.newHttpClient();
        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        System.out.println(response.statusCode());
        System.out.println(response.body());
    }

    private static String createJwt(String httpMethod, String apiPath) throws Exception {
        long now = Instant.now().getEpochSecond();
        long expiration = now + 3600;

        String canonicalString = httpMethod.toUpperCase() + "&" + apiPath + "&";
        String qsh = Base64.getUrlEncoder().encodeToString(
                MessageDigest.getInstance("SHA-256").digest(canonicalString.getBytes(StandardCharsets.UTF_8))
        );

        String payload = String.format("{\"iss\":\"%s\",\"iat\":%d,\"exp\":%d,\"qsh\":\"%s\"}", ACCESS_KEY, now, expiration, qsh);

        Mac mac = Mac.getInstance("HmacSHA256");

        // Handle URL-safe Base64 if necessary
        String correctedSecretKey = SECRET_KEY.replace('-', '+').replace('_', '/');
        byte[] decodedKey = Base64.getDecoder().decode(correctedSecretKey);
        SecretKeySpec secretKeySpec = new SecretKeySpec(decodedKey, "HmacSHA256");
        mac.init(secretKeySpec);

        String signature = Base64.getUrlEncoder().encodeToString(mac.doFinal(payload.getBytes(StandardCharsets.UTF_8)));

        return signature;
    }
}






import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.time.Instant;
import java.util.Base64;

public class ZephyrIntegration1 {
    private static final String API_TOKEN = "ATATT3xFfGF0CoP4Y4lMz-1sUyU7CAAHZb49B7Tcluwq9Rui_CWZ-DSJN-dU78WKU5erQ37ipFoi-iuAg24cwuVwlJxbuPrZh_Oaub__t4QGoKRAkO_mXOrKYwWv7LiLgVxgYtv5r5NAYckyS7cIHHsSIBEmUp9qBtENLinnh32cUq0hvE85pik=ADC3BF05";
    private static final String EMAIL = "madanreddy319@gmail.com";
    private static final String JIRA_BASE_URL = "https://madanreddy319.atlassian.net/";

    public static void main(String[] args) throws Exception {

        String apiPath = "/rest/api/latest/issue/DEMO-2";
        URI uri = new URI(JIRA_BASE_URL + apiPath);

        String auth = EMAIL + ":" + API_TOKEN;
        String encodedAuth = Base64.getEncoder().encodeToString(auth.getBytes(StandardCharsets.UTF_8));

        HttpRequest request = HttpRequest.newBuilder()
                .uri(uri)
                .header("Authorization", "Basic " + encodedAuth)
                .header("Content-Type", "application/json")
                .build();

        HttpClient client = HttpClient.newHttpClient();

        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        System.out.println(response.statusCode());
        System.out.println(response.body());
    }

}

