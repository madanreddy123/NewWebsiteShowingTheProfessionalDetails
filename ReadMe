Building the image

docker build -t personnel .


running the image

docker run -d -p 8080:80 --name MyWebsite personnel


open this link

https://madanreddy123.github.io/NewWebsiteShowingTheProfessionalDetails/

import io.cucumber.java.After;
import io.cucumber.java.Before;
import io.cucumber.java.Scenario;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import java.util.Map;

public class CucumberHooks {
    private WebDriver driver;
    private JiraZephyrUtility jiraUtil;
    private Map<String, String> testCaseIdsAndKeys;

    public CucumberHooks() {
        System.setProperty("webdriver.chrome.driver", "path/to/chromedriver");
        jiraUtil = new JiraZephyrUtility(
            "https://your-jira-instance.atlassian.net",
            "https://your-zephyr-instance",
            "your-email@example.com",
            "your-jira-api-token"
        );
    }

    @Before
    public void setUp(Scenario scenario) throws Exception {
        driver = new ChromeDriver();

        // Extract tags from the scenario
        String[] cucumberTags = scenario.getSourceTagNames().toArray(new String[0]);
        testCaseIdsAndKeys = jiraUtil.getTestCaseIdsAndKeys(cucumberTags);
    }

    @After
    public void tearDown(Scenario scenario) throws Exception {
        String projectKey = "PROJECT_KEY";  // Replace with your project key
        String cycleName = "CYCLE_NAME";  // Replace with your cycle name
        String versionName = "VERSION_NAME";  // Replace with your version name

        String projectId = jiraUtil.getProjectId(projectKey);
        String versionId = jiraUtil.getVersionId(projectId, versionName);
        String cycleId = jiraUtil.getCycleId(cycleName, projectId, versionId);

        for (Map.Entry<String, String> entry : testCaseIdsAndKeys.entrySet()) {
            String issueKey = entry.getKey();
            String issueId = entry.getValue();

            String executionId = jiraUtil.createExecution(projectId, cycleId, issueId, versionId);

            // Set status based on the scenario result
            int status = scenario.isFailed() ? 2 : 1;  // 1 = PASS, 2 = FAIL
            jiraUtil.updateExecutionStatus(executionId, status);
        }

        if (driver != null) {
            driver.quit();
        }
    }

    public WebDriver getDriver() {
        return driver;
    }
}


import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Properties;

import com.konghq.unirest.http.HttpResponse;
import com.konghq.unirest.http.Unirest;

public class GenericZephyrUtility {

    public static void main(String[] args) throws URISyntaxException, IllegalStateException, IOException {
        Properties prop = new Properties();
        try (InputStream input = new FileInputStream("config.properties")) {
            prop.load(input);
        }

        String zephyrBaseUrl = prop.getProperty("zephyrBaseUrl");
        String accessKey = prop.getProperty("accessKey");
        String secretKey = prop.getProperty("secretKey");
        String accountId = prop.getProperty("accountId");

        ZFJCloudRestClient client = ZFJCloudRestClient.restBuilder(zephyrBaseUrl, accessKey, secretKey, accountId).build();
        JwtGenerator jwtGenerator = client.getJwtGenerator();

        // API to which the JWT token has to be generated
        String createCycleUri = zephyrBaseUrl + "/public/rest/api/1.0/cycle?expand=&clonedCycleId=";

        URI uri = new URI(createCycleUri);
        int expirationInSec = 360;
        String jwt = jwtGenerator.generateJWT("GET", uri, expirationInSec);

        // Print the URL and JWT token to be used for making the REST call
        System.out.println("FINAL API : " + uri.toString());
        System.out.println("JWT Token : " + jwt);

        // Example: Making an actual REST call using the generated JWT token
        HttpResponse<String> response = Unirest.get(uri.toString())
                .header("Authorization", "Bearer " + jwt)
                .header("zapiAccessKey", accessKey)
                .asString();

        if (response.getStatus() == 200) {
            System.out.println("Response: " + response.getBody());
        } else {
            System.out.println("Failed to get response: " + response.getStatus() + " " + response.getStatusText());
        }
    }
}