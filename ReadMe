Building the image

docker build -t personnel .


running the image

docker run -d -p 8080:80 --name MyWebsite personnel


open this link

https://madanreddy123.github.io/NewWebsiteShowingTheProfessionalDetails/

     import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;

import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

public class ZephyrIntegration {

    private final String baseUrl;
    private final String username;
    private final String apiToken;
    private final String accessKey;
    private final String auth;

    private static final Map<String, String> TAG_TO_ZEPHYR_STATUS = new HashMap<>();
    static {
        TAG_TO_ZEPHYR_STATUS.put("status-pass", "1"); // Zephyr status code for Pass
        TAG_TO_ZEPHYR_STATUS.put("status-fail", "2"); // Zephyr status code for Fail
        TAG_TO_ZEPHYR_STATUS.put("status-wip", "3");  // Zephyr status code for Work in Progress
        TAG_TO_ZEPHYR_STATUS.put("status-blocked", "4"); // Zephyr status code for Blocked
    }

    public ZephyrIntegration(String baseUrl, String username, String apiToken, String accessKey) {
        this.baseUrl = baseUrl;
        this.username = username;
        this.apiToken = apiToken;
        this.accessKey = accessKey;
        this.auth = Base64.getEncoder().encodeToString((username + ":" + apiToken).getBytes());
    }

    public void updateTestResults(String jsonReportPath) throws IOException {
        File jsonReport = new File(jsonReportPath);
        String json = new String(Files.readAllBytes(jsonReport.toPath()));

        // Parse JSON and update Zephyr
        updateTestResultsInZephyr(json);
    }

    private void updateTestResultsInZephyr(String json) throws IOException {
        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode rootNode = objectMapper.readTree(json);

        for (JsonNode featureNode : rootNode) {
            for (JsonNode elementNode : featureNode.path("elements")) {
                String testCaseKey = null;
                String status = null;

                for (JsonNode tagNode : elementNode.path("tags")) {
                    String tagName = tagNode.path("name").asText();
                    if (tagName.startsWith("@zephyr-test-id-")) {
                        testCaseKey = tagName.replace("@zephyr-test-id-", "");
                    } else if (TAG_TO_ZEPHYR_STATUS.containsKey(tagName)) {
                        status = TAG_TO_ZEPHYR_STATUS.get(tagName);
                    }
                }

                if (testCaseKey != null && status != null) {
                    updateZephyrExecutionStatus(testCaseKey, status);
                }
            }
        }
    }

    private void updateZephyrExecutionStatus(String testCaseKey, String status) throws IOException {
        CloseableHttpClient httpClient = HttpClients.createDefault();
        HttpPost request = new HttpPost(baseUrl + "rest/zapi/latest/execution");
        request.setHeader("Authorization", "Basic " + auth);
        request.setHeader("Content-Type", "application/json");
        request.setHeader("zapiAccessKey", accessKey);

        String jsonPayload = String.format("{\"status\": \"%s\", \"testCaseKey\": \"%s\"}", status, testCaseKey);
        StringEntity params = new StringEntity(jsonPayload);
        request.setEntity(params);

        CloseableHttpResponse response = httpClient.execute(request);
        System.out.println(EntityUtils.toString(response.getEntity()));
    }

    public static void main(String[] args) {
        try {
            String baseUrl = "https://dafm-gov-ie.atlassian.net/";
            String username = "your_username";
            String apiToken = "your_api_token";
            String accessKey = "your_access_key";
            String jsonReportPath = "target/cucumber-reports/Cucumber.json";

            ZephyrIntegration zephyrIntegration = new ZephyrIntegration(baseUrl, username, apiToken, accessKey);
            zephyrIntegration.updateTestResults(jsonReportPath);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}


To make the provided script generic, we'll need to parameterize the various constants like `zephyrBaseUrl`, `accessKey`, `secretKey`, and `accountId` so they can be passed as arguments or read from a configuration file or environment variables. This will allow the script to be reused with different configurations without modifying the code.

### Updated Script

Below is the updated version of the script that uses environment variables to make it generic:

```java
import com.konghq.unirest.http.HttpResponse;
import com.konghq.unirest.http.Unirest;
import org.json.JSONObject;

import java.net.URI;
import java.net.URISyntaxException;

public class GenericZephyrUtility {

    public static void main(String[] args) throws URISyntaxException, IllegalStateException, IOException {
        // Replace Zephyr BaseUrl with the <ZAPI_CLOUD_URL> shared with ZAPI Cloud Installation
        String zephyrBaseUrl = System.getenv("ZEPHYR_BASE_URL");
        String accessKey = System.getenv("ZEPHYR_ACCESS_KEY"); // we can get from Addons -> API keys section
        String secretKey = System.getenv("ZEPHYR_SECRET_KEY"); // we can get from Addons -> API keys section
        String accountId = System.getenv("ZEPHYR_ACCOUNT_ID"); // accountId can be found in ZAPI Cloud section

        ZFJCloudRestClient client = ZFJCloudRestClient.restBuilder(zephyrBaseUrl, accessKey, secretKey, accountId).build();
        JwtGenerator jwtGenerator = client.getJwtGenerator();

        // API to which the JWT token has to be generated
        String createCycleUri = zephyrBaseUrl + "/public/rest/api/1.0/cycle?expand=&clonedCycleId=";

        URI uri = new URI(createCycleUri);
        int expirationInSec = 360;
        String jwt = jwtGenerator.generateJWT("GET", uri, expirationInSec);

        // Print the URL and JWT token to be used for making the REST call
        System.out.println("FINAL API : " + uri.toString());
        System.out.println("JWT Token : " + jwt);

        // Example: Making an actual REST call using the generated JWT token
        HttpResponse<String> response = Unirest.get(uri.toString())
                .header("Authorization", "Bearer " + jwt)
                .header("zapiAccessKey", accessKey)
                .asString();

        if (response.getStatus() == 200) {
            System.out.println("Response: " + response.getBody());
        } else {
            System.out.println("Failed to get response: " + response.getStatus() + " " + response.getStatusText());
        }
    }
}
```

### Setting Environment Variables

To run the script, you'll need to set the environment variables. Here is how you can do it in different operating systems:

#### On Windows

1. Open a Command Prompt or PowerShell.
2. Run the following commands:

```cmd
setx ZEPHYR_BASE_URL "https://your-zephyr-instance"
setx ZEPHYR_ACCESS_KEY "your-access-key"
setx ZEPHYR_SECRET_KEY "your-secret-key"
setx ZEPHYR_ACCOUNT_ID "your-account-id"
```

#### On macOS/Linux

1. Open a terminal.
2. Run the following commands:

```bash
export ZEPHYR_BASE_URL="https://your-zephyr-instance"
export ZEPHYR_ACCESS_KEY="your-access-key"
export ZEPHYR_SECRET_KEY="your-secret-key"
export ZEPHYR_ACCOUNT_ID="your-account-id"
```

### Using a Configuration File

Alternatively, you can use a configuration file (e.g., `config.properties`) to store these values and read them in your Java code.

### config.properties Example

```properties
zephyrBaseUrl=https://your-zephyr-instance
accessKey=your-access-key
secretKey=your-secret-key
accountId=your-account-id
```

### Updated Script to Read from config.properties

```java
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Properties;

import com.konghq.unirest.http.HttpResponse;
import com.konghq.unirest.http.Unirest;

public class GenericZephyrUtility {

    public static void main(String[] args) throws URISyntaxException, IllegalStateException, IOException {
        Properties prop = new Properties();
        try (InputStream input = new FileInputStream("config.properties")) {
            prop.load(input);
        }

        String zephyrBaseUrl = prop.getProperty("zephyrBaseUrl");
        String accessKey = prop.getProperty("accessKey");
        String secretKey = prop.getProperty("secretKey");
        String accountId = prop.getProperty("accountId");

        ZFJCloudRestClient client = ZFJCloudRestClient.restBuilder(zephyrBaseUrl, accessKey, secretKey, accountId).build();
        JwtGenerator jwtGenerator = client.getJwtGenerator();

        // API to which the JWT token has to be generated
        String createCycleUri = zephyrBaseUrl + "/public/rest/api/1.0/cycle?expand=&clonedCycleId=";

        URI uri = new URI(createCycleUri);
        int expirationInSec = 360;
        String jwt = jwtGenerator.generateJWT("GET", uri, expirationInSec);

        // Print the URL and JWT token to be used for making the REST call
        System.out.println("FINAL API : " + uri.toString());
        System.out.println("JWT Token : " + jwt);

        // Example: Making an actual REST call using the generated JWT token
        HttpResponse<String> response = Unirest.get(uri.toString())
                .header("Authorization", "Bearer " + jwt)
                .header("zapiAccessKey", accessKey)
                .asString();

        if (response.getStatus() == 200) {
            System.out.println("Response: " + response.getBody());
        } else {
            System.out.println("Failed to get response: " + response.getStatus() + " " + response.getStatusText());
        }
    }
}
```

By making these changes, the script becomes generic and reusable across different environments or configurations.