Building the image

docker build -t personnel .


running the image

docker run -d -p 8080:80 --name MyWebsite personnel


open this link

https://madanreddy123.github.io/NewWebsiteShowingTheProfessionalDetails/

Creating a PowerPoint (PPT) presentation that effectively explains your automation framework setup requires breaking down each component of the setup and presenting it clearly. Below is an outline for your PPT, which includes all the requested details.

---

### **Title Slide:**
**Automation Framework Using Selenium, Java, Maven, Cucumber BDD, POM, and TestNG**

---

### **Slide 1: Introduction**
- **Overview:**
  - A comprehensive automation framework built using Selenium, Java, Maven, Cucumber BDD, and TestNG.
  - Supports parallel execution, test data management, DB validation, and integration with Bamboo for CI/CD.
  
---

### **Slide 2: Framework Architecture**
- **Components:**
  - **Selenium WebDriver:** For browser automation.
  - **Java:** Primary language for implementation.
  - **Maven:** Build and dependency management tool.
  - **Cucumber BDD:** For behavior-driven development, allowing easy creation of feature files and test cases.
  - **TestNG:** For test execution, including parallel execution and failed test case reruns.
  - **Page Object Model (POM):** Design pattern for separating UI interactions from test logic.
  - **Selenium Grid:** For remote execution of tests.

---

### **Slide 3: Maven Integration**
- **Maven Profiles:**
  - Profiles are defined in `pom.xml` to manage and group test cases.
  - Allows running tests based on specific requirements (e.g., smoke tests, regression tests).
  
---

### **Slide 4: Cucumber BDD**
- **Feature Files:**
  - User-friendly Gherkin syntax to define test scenarios.
  - Each scenario describes an end-to-end user journey.
- **Test Runner:**
  - Configured for rerunning failed test cases.
  - Uses `@CucumberOptions` in the test runner for configuring parallel execution and failed test reruns.
  
---

### **Slide 5: Page Object Model (POM)**
- **Why POM?**
  - Enhances code reusability and maintainability by separating page objects from test logic.
- **By Locator:**
  - Used to locate UI elements within the page object class.
  - Example: `By id = By.id("username");`
  
---

### **Slide 6: Test Data Management**
- **Enum Class:**
  - Enum used to manage test data consistently across the framework.
  - Example: `public enum TestData {USERNAME, PASSWORD};`
  
- **Excel Data Management:**
  - Excel file is read for dynamic test data.
  - Apache POI is used to fetch test data from Excel and pass it to the application.
  
---

### **Slide 7: Database Validation**
- **DB Integration:**
  - Database validation is implemented to check data consistency and correctness in the backend.
  - JDBC is used to connect and query the database.
  - Example queries are executed during test validation to ensure application data integrity.
  
---

### **Slide 8: PDF Validation**
- **PDF Comparator:**
  - Validates PDF content in the application against a baseline PDF.
  - The PDF Comparator tool is integrated to ensure generated PDFs are correct.
  
---

### **Slide 9: Screenshot Capture**
- **Failed Scenario Screenshots:**
  - Automated screenshots are taken for failed test scenarios.
  - Captured during Bamboo job execution and stored in the test report.
  
---

### **Slide 10: Bamboo Integration**
- **CI/CD with Bamboo:**
  - Tests are executed on Bamboo CI/CD pipeline.
  - Bamboo triggers jobs that run on a remote desktop using Selenium Grid.
  
---

### **Slide 11: Remote Desktop Execution with Selenium Grid**
- **Selenium Grid:**
  - Tests are executed on a remote desktop using Selenium Grid.
  - Supports parallel execution across different machines or browsers.
  
---

### **Slide 12: Parallel Execution with TestNG**
- **TestNG Parallel Execution:**
  - Configured to run tests in parallel using TestNG XML configuration.
  - Optimizes execution time by running multiple tests simultaneously.
  
---

### **Slide 13: Conclusion**
- **Key Features:**
  - Robust and scalable automation framework.
  - Integrated with Cucumber BDD, Maven, and TestNG for effective test management and execution.
  - Supports parallel and remote execution, test data management, and PDF/DB validation.

---

### **Slide 14: Questions**
- Open for queries on specific framework components or implementation details.

---

This outline covers all the aspects of the automation framework you've implemented. You can create the slides by expanding each bullet point with diagrams (such as architecture diagrams), code snippets, and key screenshots for better clarity.

If you'd like, I can provide content for each slide, or guide you on how to generate a detailed PowerPoint from this outline.