Building the image

docker build -t personnel .


running the image

docker run -d -p 8080:80 --name MyWebsite personnel


open this link

https://madanreddy123.github.io/NewWebsiteShowingTheProfessionalDetails/

    for (String macAlgorithm : Security.getAlgorithms("Mac")) {
            System.out.println(macAlgorithm);
        }

/rest/api/latest/issue/testcaseid?

 <dependency>
    <groupId>org.apache.httpcomponents</groupId>
    <artifactId>httpclient</artifactId>
    <version>4.5.13</version>
  </dependency>

  <!-- JSON parsing library -->
  <dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-databind</artifactId>
    <version>2.12.3</version>
  </dependency>
    
 private static final String JIRA_BASE_URL = "https://madanreddy319.atlassian.net";
    private static final String ZEPHYR_BASE_URL = "https://prod-api.zephyr4jiracloud.com/connect";
    private static final String API_TOKEN = "your_api_token";
    private static final String PROJECT_KEY = "DEMO";
    private static final String TEST_CYCLE_KEY = "DEMO-R1";
    private static final String ISSUE_KEY = "DEMO-T1";
    private static final String USERNAME = "madanreddy319@gmail.com"; // replace with your Jira username


    public static void main(String[] args) {
        String executionId = createTestExecution(ISSUE_KEY, TEST_CYCLE_KEY);
        updateTestExecutionStatus(executionId, "PASS");
    }

    public static String createTestExecution(String issueKey, String TEST_CYCLE_KEY) {
        String apiUrl = JIRA_BASE_URL + "/rest/api/2/issue";
        String jsonPayload = String.format(
                "{\"fields\": {\"project\": {\"key\": \"%s\"}, \"summary\": \"Test Execution for %s\", \"issuetype\": {\"name\": \"Test Execution\"}, \"customfield_12345\": \"%s\"}}",
                PROJECT_KEY, issueKey, TEST_CYCLE_KEY);

        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
            HttpPost request = new HttpPost(apiUrl);
            request.setHeader("Content-Type", "application/json");
            String auth = USERNAME + ":" + API_TOKEN;
            byte[] encodedAuth = Base64.getEncoder().encode(auth.getBytes());
            String authHeader = "Basic " + new String(encodedAuth);
            request.setHeader("Authorization", authHeader);
            request.setEntity(new StringEntity(jsonPayload));

            System.out.println("Request: " + request);

            try (CloseableHttpResponse response = httpClient.execute(request)) {
                int statusCode = response.getStatusLine().getStatusCode();
                String responseString = EntityUtils.toString(response.getEntity());
                System.out.println("Response: " + responseString);

                if (statusCode != 201) {
                    System.err.println("Failed to create test execution. HTTP error code: " + statusCode);
                    return null;
                }

                ObjectMapper mapper = new ObjectMapper();
                JsonNode jsonNode = mapper.readTree(responseString);
                if (jsonNode.has("id")) {
                    return jsonNode.get("id").asText();
                } else {
                    System.err.println("Response JSON does not contain 'id' field");
                    return null;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    public static void updateTestExecutionStatus(String executionId, String status) {
        String apiUrl = JIRA_BASE_URL + "/rest/api/2/issue/" + executionId + "/transitions";
        String jsonPayload = String.format("{\"transition\": {\"id\": \"%s\"}}", status.equals("PASS") ? "31" : "41"); // Example transition IDs

        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
            HttpPost request = new HttpPost(apiUrl);
            request.setHeader("Content-Type", "application/json");
            String auth = USERNAME + ":" + API_TOKEN;
            byte[] encodedAuth = Base64.getEncoder().encode(auth.getBytes());
            String authHeader = "Basic " + new String(encodedAuth);
            request.setHeader("Authorization", authHeader);
            request.setEntity(new StringEntity(jsonPayload));

            System.out.println("Request: " + request);

            try (CloseableHttpResponse response = httpClient.execute(request)) {
                int statusCode = response.getStatusLine().getStatusCode();
                String responseString = EntityUtils.toString(response.getEntity());
                System.out.println("Response: " + responseString);

                if (statusCode != 204) {
                    System.err.println("Failed to update test execution status. HTTP error code: " + statusCode);
                } else {
                    System.out.println("Test execution status updated successfully");
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

}






     



import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.util.Base64;

public class JiraIntegration {

    private static final String JIRA_BASE_URL = "https://your-jira-server.com";
    private static final String API_TOKEN = "your_api_token";
    private static final String PROJECT_KEY = "your_project_key";
    private static final String TEST_CYCLE_KEY = "your_test_cycle_key";
    private static final String ISSUE_KEY = "your_test_case_key";

    public static void main(String[] args) {
        String executionId = createTestExecution(ISSUE_KEY, TEST_CYCLE_KEY);
        updateTestExecutionStatus(executionId, "PASS");
    }

    public static String createTestExecution(String issueKey, String cycleId) {
        String apiUrl = JIRA_BASE_URL + "/rest/api/2/issue";
        String jsonPayload = String.format("{\"fields\": {\"project\": {\"key\": \"%s\"}, \"summary\": \"Test Execution\", \"issuetype\": {\"name\": \"Test Execution\"}}}", PROJECT_KEY);

        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
            HttpPost request = new HttpPost(apiUrl);
            request.setHeader("Content-Type", "application/json");
            String auth = "your_username:" + API_TOKEN;
            byte[] encodedAuth = Base64.getEncoder().encode(auth.getBytes());
            String authHeader = "Basic " + new String(encodedAuth);
            request.setHeader("Authorization", authHeader);
            request.setEntity(new StringEntity(jsonPayload));

            try (CloseableHttpResponse response = httpClient.execute(request)) {
                String responseString = EntityUtils.toString(response.getEntity());
                ObjectMapper mapper = new ObjectMapper();
                JsonNode jsonNode = mapper.readTree(responseString);
                String executionId = jsonNode.get("id").asText();
                return executionId;
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    public static void updateTestExecutionStatus(String executionId, String status) {
        String apiUrl = JIRA_BASE_URL + "/rest/api/2/issue/" + executionId + "/transitions";
        String jsonPayload = String.format("{\"transition\": {\"id\": \"%s\"}}", status.equals("PASS") ? "31" : "41"); // Example transition IDs

        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
            HttpPost request = new HttpPost(apiUrl);
            request.setHeader("Content-Type", "application/json");
            String auth = "your_username:" + API_TOKEN;
            byte[] encodedAuth = Base64.getEncoder().encode(auth.getBytes());
            String authHeader = "Basic " + new String(encodedAuth);
            request.setHeader("Authorization", authHeader);
            request.setEntity(new StringEntity(jsonPayload));

            try (CloseableHttpResponse response = httpClient.execute(request)) {
                String responseString = EntityUtils.toString(response.getEntity());
                System.out.println("Response: " + responseString);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}



import io.cucumber.java.en.Then;
import static org.junit.Assert.assertTrue;

public class StepDefinitions {

    @Then("the test should pass")
    public void the_test_should_pass() {
        String executionId = JiraIntegration.createTestExecution("TEST-123", "CYCLE-1");
        boolean testResult = runSeleniumTest();
        String status = testResult ? "PASS" : "FAIL";
        JiraIntegration.updateTestExecutionStatus(executionId, status);
        assertTrue(testResult);
    }

    private boolean runSeleniumTest() {
        // Your Selenium test logic here
        return true;
    }
}

Subject: Clarification on Zephyr Jira Integration and Execution Status Update

Hi [Recipient's Name],

I hope this email finds you well.

I wanted to clarify our current process regarding the Zephyr Jira integration. We are using the Zephyr test case ID with the ZAPI endpoint to update the execution status on the Zephyr automation cycle. This is done through RestAssured, which uses the Jira APIs and updates the test execution status directly on the Zephyr automation cycle.

However, the video that was shared seems to demonstrate a different approach from what we have done earlier. It does not align with our current implementation. Let's address this discrepancy to ensure our methods are consistent.

Thank you for your cooperation.

Best regards,

[Your Name]
